TASK: Debug Meridian InputData API and implement correct initialization
In file python_scripts/train_meridian_simple.py, we need to find out what InputData actually expects.
REPLACE the entire try block for Meridian (starting around line 27) with:
pythontry:
    from meridian.model.model import Meridian
    from meridian.model.spec import ModelSpec
    from meridian.data.input_data import InputData
    print(json.dumps({"status": "meridian_imported", "progress": 25}))
    
    # Let's inspect what InputData expects
    print(json.dumps({"status": "inspecting_api", "message": f"InputData signature: {InputData.__init__.__code__.co_varnames}"}))
    
    # Use simpler approach - let's try the most basic initialization
    print(json.dumps({"status": "preparing_data", "progress": 30}))
    
    # Prepare data as simple numpy arrays
    n_time_periods = len(df)
    n_geos = 1  # National model
    n_media_channels = len(config['channel_columns'])
    
    # Extract KPI data
    kpi_data = df[config['target_column']].values.reshape(n_geos, n_time_periods)
    
    # Extract media data (impressions/spend)
    media_data = []
    for channel in config['channel_columns']:
        media_data.append(df[channel].values)
    media_array = np.stack(media_data, axis=1).reshape(n_geos, n_time_periods, n_media_channels)
    
    # Try the simplest possible InputData initialization
    # Based on common MMM patterns, it likely expects:
    input_data = InputData(
        kpi=kpi_data,
        media=media_array
    )
    
    print(json.dumps({"status": "data_prepared", "progress": 35}))
    
except Exception as e:
    # If that fails, try alternative initialization patterns
    print(json.dumps({"status": "trying_alternative", "message": str(e)}))
    
    try:
        # Alternative 1: Maybe it expects xarray DataArrays after all
        import xarray as xr
        
        # Create xarray dataset
        ds = xr.Dataset({
            'kpi': (['geo', 'time'], kpi_data),
            'media': (['geo', 'time', 'media'], media_array)
        })
        
        input_data = InputData(ds)
        print(json.dumps({"status": "alternative_worked", "message": "Using xarray Dataset"}))
        
    except Exception as e2:
        # Last resort - look at the actual error and create mock
        print(json.dumps({"status": "all_attempts_failed", "error1": str(e), "error2": str(e2)}))
        raise Exception(f"Could not initialize InputData: {e}")
IMPORTANT: This approach will help us debug what InputData actually expects by:

Inspecting its signature
Trying minimal initialization
Trying alternative patterns
Giving us clear error messages