Response to You
You've hit the nail on the head! The TensorFlow initialization issues are almost certainly why you ended up going down the mock data path. This is a very common problem with Meridian:

Meridian is built on TensorFlow Probability - Even importing it triggers heavy TF initialization
Replit's CPU-only environment makes this much worse - TF tries to optimize for hardware that isn't there
The initialization can take 30+ seconds or even timeout completely

This explains your entire architecture decision - rather than waiting minutes for each test run (or having them fail), you built a mock fallback system. The problem is that the mock system became the only system.
The good news is we can discover Meridian's API without triggering the heavy TensorFlow operations. We just need to be clever about how we inspect the methods.

Prompt for Replit AI Agent
CONTEXT: TensorFlow Initialization Blocking API Discovery
The previous test script is hanging because TensorFlow initialization is extremely slow in Replit's CPU environment. This is WHY the team originally implemented mock data fallbacks - but now we need to discover the real Meridian API without triggering heavy TF operations.
THE ISSUE

Meridian uses TensorFlow Probability which has slow initialization
Even creating a Meridian model object triggers TF graph compilation
This can take 30+ seconds or timeout on Replit
We need to discover the API methods WITHOUT running them

IMMEDIATE TASK
Create a new lightweight API discovery script python_scripts/discover_meridian_api.py:
python#!/usr/bin/env python3
"""
Lightweight Meridian API discovery - avoids heavy TensorFlow operations
"""

import sys
import importlib
import inspect

print("=== Meridian API Discovery (Lightweight) ===\n")

# Step 1: Import without initializing
print("1. Checking Meridian imports...")
try:
    # These imports should be fast
    import meridian
    from meridian import model
    from meridian import data  
    from meridian import analyzer
    from meridian import optimizer
    print("✓ Base imports successful")
except ImportError as e:
    print(f"✗ Import error: {e}")
    sys.exit(1)

# Step 2: Discover model methods without creating instance
print("\n2. Discovering Meridian model methods...")
try:
    # Get the Meridian class without instantiating
    MeridianClass = model.Meridian
    
    print("Public methods on Meridian class:")
    for name, method in inspect.getmembers(MeridianClass, predicate=inspect.isfunction):
        if not name.startswith('_'):
            # Get method signature
            try:
                sig = inspect.signature(method)
                print(f"  - {name}{sig}")
            except:
                print(f"  - {name}()")
    
    # Look specifically for sampling/training methods
    print("\nMethods containing 'sample', 'fit', or 'train':")
    for name in dir(MeridianClass):
        if any(keyword in name.lower() for keyword in ['sample', 'fit', 'train', 'run', 'posterior']):
            print(f"  - {name}")
            
except Exception as e:
    print(f"✗ Error inspecting model: {e}")

# Step 3: Discover analyzer methods
print("\n3. Discovering analyzer methods...")
try:
    if hasattr(analyzer, 'Analyzer'):
        AnalyzerClass = analyzer.Analyzer
        print("Public methods on Analyzer class:")
        for name, method in inspect.getmembers(AnalyzerClass, predicate=inspect.isfunction):
            if not name.startswith('_'):
                print(f"  - {name}")
                
        # Look for result extraction methods
        print("\nMethods containing 'get', 'extract', or 'compute':")
        for name in dir(AnalyzerClass):
            if any(keyword in name.lower() for keyword in ['get', 'extract', 'compute', 'roi', 'metric']):
                print(f"  - {name}")
    else:
        print("✗ analyzer.Analyzer not found")
except Exception as e:
    print(f"✗ Error inspecting analyzer: {e}")

# Step 4: Discover optimizer structure
print("\n4. Discovering optimizer module...")
try:
    print("Contents of optimizer module:")
    for name in dir(optimizer):
        if not name.startswith('_'):
            obj = getattr(optimizer, name)
            print(f"  - {name}: {type(obj).__name__}")
            
    # Check for BudgetOptimizer
    if hasattr(optimizer, 'BudgetOptimizer'):
        print("\n✓ BudgetOptimizer found!")
        BOClass = optimizer.BudgetOptimizer
        print("BudgetOptimizer methods:")
        for name in dir(BOClass):
            if not name.startswith('_') and not name.isupper():
                print(f"    - {name}")
except Exception as e:
    print(f"✗ Error inspecting optimizer: {e}")

# Step 5: Check data module for InputData
print("\n5. Checking InputData structure...")
try:
    if hasattr(data, 'InputData'):
        print("✓ InputData found")
        # Show init signature
        init_sig = inspect.signature(data.InputData.__init__)
        print(f"  InputData.__init__{init_sig}")
    else:
        print("✗ InputData not found in data module")
except Exception as e:
    print(f"✗ Error inspecting InputData: {e}")

# Step 6: Look for example usage in docstrings
print("\n6. Checking for usage examples in docstrings...")
try:
    if hasattr(model.Meridian, '__doc__') and model.Meridian.__doc__:
        print("Meridian class docstring:")
        print(model.Meridian.__doc__[:500] + "..." if len(model.Meridian.__doc__) > 500 else model.Meridian.__doc__)
        
    # Check for sample_posterior docstring
    if hasattr(model.Meridian, 'sample_posterior'):
        if hasattr(model.Meridian.sample_posterior, '__doc__') and model.Meridian.sample_posterior.__doc__:
            print("\nsample_posterior docstring:")
            print(model.Meridian.sample_posterior.__doc__[:300] + "...")
except Exception as e:
    print(f"✗ Error reading docstrings: {e}")

print("\n=== Discovery Complete ===")
print("\nNext steps:")
print("1. If sample_posterior exists, that's the training method")
print("2. Use analyzer.Analyzer for results extraction")
print("3. Avoid instantiating models in Replit due to TF overhead")
print("4. Consider running actual training outside Replit")
WHAT TO DO

Create this lightweight discovery script exactly as shown
Run it: python python_scripts/discover_meridian_api.py
This script only inspects classes, it doesn't create instances or trigger TensorFlow
Show me the complete output - this will reveal method names and signatures

WHAT NOT TO DO

DO NOT create Meridian model instances in this script - that triggers TensorFlow
DO NOT call any methods - just discover what exists
DO NOT import TensorFlow directly - let Meridian handle it internally
DO NOT try to "fix" TensorFlow issues - we're avoiding them entirely

EXPECTED OUTCOME
This lightweight script will show us:

Exact method names on Meridian class (including sample_posterior)
Method signatures (what parameters they expect)
Analyzer methods for extracting results
Optimizer structure for budget optimization
All without triggering heavy TensorFlow initialization

WHY THIS APPROACH WORKS
By using Python's inspect module and avoiding object instantiation:

We can see all available methods without running them
No TensorFlow graph compilation occurs
The script should complete in seconds, not minutes
We get the API information needed to fix the training script

IMPORTANT REALIZATION
The TensorFlow performance issues explain why mock fallbacks were created, but now we understand:

For development/testing: Use mock data (clearly labeled)
For production training: Run on proper hardware with GPU
For API discovery: Use lightweight inspection (this script)

This is a common pattern with heavy ML frameworks - develop with mocks, deploy with real compute.